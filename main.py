import asyncio
import datetime
import logging
import random
import re

import aioschedule
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils import executor
from aiogram_calendar import simple_cal_callback, SimpleCalendar

import buttons
import db_admin
import remember_list
from config import token
from mail_sendler import send_email

email = "me@host.com"

pattern = r"^[-\w\.]+@([-\w]+\.)+[-\w]{2,4}$"

logging.basicConfig(filename='log.txt', filemode='w',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S', encoding='UTF-8', level=logging.DEBUG)
logging.info("Log started")

bot = Bot(token=token)
dp = Dispatcher(bot, storage=MemoryStorage())
db_admin.sql_start()

now = datetime.datetime.now()


class Promises(StatesGroup):
    promis_text = State()
    promis_date = State()
    promis_email = State()


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    if db_admin.check_user(message.from_user.id) != None:
        await message.answer("–û–ø—è—Ç—å —Ç—ã ? \n"
                             "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —Ç—ã –æ–±–µ—â–∞–ª:  ", reply_markup=buttons.check_promise_button)

    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}.\n"
                             f"–Ø –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.–û—Å—Ç–∞–≤—å –º–Ω–µ –æ–±–µ—â–∞–Ω–∏–µ,–∏ —è –±—É–¥—É –æ –Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å",
                             reply_markup=buttons.promise_button)


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.answer("–û—Å—Ç–∞–≤—å –æ–±–µ—â–∞–Ω–∏–µ –∏ —è –±—É–¥—É –æ –Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å . –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞")


@dp.message_handler(text='–î–∞—Ç—å –æ–±–µ—â–∞–Ω–∏–µ')
async def promise(message: types.Message):
    await Promises.promis_text.set()
    await message.answer("–•–æ—Ä–æ—à–æ.–ù–∞–ø–∏—à–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–æ–±–µ—â–∞—Ç—å", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=Promises.promis_text)
async def answer_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    async with state.proxy() as data:
        data["user_id"] = user_id
        data["user_name"] = user_name
        data["promise"] = message.text
        await message.delete()

    await state.reset_state(with_data=False)
    await message.answer("–•–æ—Ä–æ—à–æ.–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞", reply_markup=await SimpleCalendar().start_calendar())


@dp.callback_query_handler(simple_cal_callback.filter())
async def answer_date(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    selected, date = await SimpleCalendar().process_selection(call, callback_data)
    if selected:
        await Promises.promis_date.set()
        await state.update_data(deadline=f'{date.strftime("%Y.%m.%d")}')
        data = await state.get_data()
        await db_admin.sql_add(data)
        await state.finish()
        if db_admin.sql_deadline(call.from_user.id)[0] < now.strftime("%Y.%m.%d"):
            await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —É–∂–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è.–û–±–µ—â–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ")
            db_admin.sql_delete(call.from_user.id)
        else:
            await bot.send_message(call.from_user.id, f'–¢—ã –ø–æ–æ–±–µ—â–∞–ª {data["promise"]} –¥–æ {data["deadline"]}')
            await bot.send_message(call.from_user.id, "–ù–æ –∫–æ–º—É —Ç—ã –¥–∞–µ—à—å —ç—Ç–æ –æ–±–µ—â–∞–Ω–∏–µ ?",
                                   reply_markup=buttons.promise_email)


@dp.message_handler(text="–°–µ–±–µ")
async def answer_sebe(message: types.Message):
    await message.answer("–û–∫.–ë—É–¥—É –ø–µ—Ä–µ–æ–¥–∏—á–µ—Å–∫–∏ —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± —ç—Ç–æ–º", reply_markup=types.ReplyKeyboardRemove())
    await message.answer("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start ,  –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π")


@dp.message_handler(text="–î—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É")
async def answer_another(message: types.Message):
    await message.answer("–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ email –∞–¥—Ä–µ—Å", reply_markup=types.ReplyKeyboardRemove())
    await Promises.promis_email.set()


@dp.message_handler(state=Promises.promis_email)
async def answer_email(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['email'] = message.text
        if "@" not in message.text:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã –≤ –≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (lohpidor@mail.ru)")
            await Promises.promis_email.set()
        else:
            await db_admin.sql_add_email(data, message.from_user.id)
            await state.finish()
            await message.delete()
            await message.answer(
                f"–ü–æ—á—Ç–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.–ï—Å–ª–∏ —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—à—å —Å–≤–æ—ë –æ–±–µ—â–∞–Ω–∏–µ –¥–æ {db_admin.promise_check(message.from_user.id)[1]} —á–µ–ª–æ–≤–µ–∫—É –ø—Ä–∏–¥–µ—Ç –ø–∏—Å—å–º–æ"
                f" —Å —Ä–∞—Å—Å–∫–∞–∑–æ–º –æ —Ç–æ–º, –∫–∞–∫ —Ç—ã –µ–≥–æ –æ–±–º–∞–Ω—É–ª –∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –æ–±–µ—â–∞–Ω–Ω–æ–≥–æ.")
            await message.answer("–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ /start ,  –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π")



@dp.message_handler(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–µ—â–∞–Ω–∏–µ")
async def check_promise(message: types.Message):
    db_admin.promise_check(message.from_user.id)
    await message.answer(
        f"–¢—ã –æ–±–µ—â–∞–ª {db_admin.check_promise(message.from_user.id)[0]} –¥–æ {db_admin.promise_check(message.from_user.id)[1]}")
    await message.answer("–¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª —ç—Ç–æ –æ–±–µ—â–∞–Ω–∏–µ?", reply_markup=buttons.promise_answer_button)


@dp.message_handler(text="–í—ã–ø–æ–ª–Ω–∏–ª")
async def answer_yes(message: types.Message):
    await message.answer("–ó–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å ?", reply_markup=buttons.delete_promise_button)
    db_admin.sql_delete(message.from_user.id)


@dp.message_handler(text="–£–¥–∞–ª–∏—Ç—å –æ–±–µ—â–∞–Ω–∏–µ")
async def delete_promise(message: types.Message):
    await message.answer("–û–±–µ—â–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ."
                         "–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ.\n"
                         "–î–ª—è —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é menu",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(text="–ï—â–µ –Ω–µ—Ç")
async def answer_no(message: types.Message):
    await bot.send_photo(message.from_user.id, "https://raritem.ru/wp-content/uploads/2021/12/thing.jpg",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    if message.from_user.id == 293427068:
        while True:
            text = random.choice(remember_list.spisok)
            users = db_admin.all_users()
            for user in users:
                await bot.send_message(user[0], text)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É {user} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            await asyncio.sleep(random.randint(120, 240))


@dp.message_handler(commands=['spam'])
async def spam(message):
    for deadline in db_admin.check_info():
        if deadline[1] <= now.strftime("%Y.%m.%d"):
            await bot.send_message(deadline[0],
                                   "–í—Ä–µ–º—è –≤—ã—à–ª–æ –∏ —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª –æ–±–µ—â–∞–Ω–∏–µ.–û—Ç–Ω—ã–Ω–µ —Ç—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ —á–æ—Ä—Ç.–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º  ü•≥ ü•≥  ü•≥  ")

            for mail in db_admin.check_email():
                if mail[0] != None:
                    print(mail[0])
                    await send_email(f"{mail[0]}")
                    db_admin.sql_delete(deadline[0])

        else:
            text = random.choice(remember_list.spisok)
            await bot.send_message(deadline[0], text)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É {deadline[0]} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ {now.strftime('%H:%M  %d.%m.%Y')}!")


async def scheduler():
    aioschedule.every().day.at("12:35").do(spam, "message")
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(10)


async def on_startup(_):
    asyncio.create_task(scheduler())


@dp.message_handler(commands=['sendone'])
async def sendone(message: types.Message):
    if message.from_user.id == 293427068:
        text = ("–ù—É —à–æ —Ç—ã , –º–∞–ª–∞–¥–æ–π —à–µ—Ä—à–µ–Ω—å.–ù–µ –∑–∞–±—ã–ª –µ—â–µ —á—Ç–æ –æ–±–µ—â–∞–ª?")
        user_volos = 161611465
        user_admin = 293427068
        user_star = 87241346
        user_vovan = 881052206
        user_vlad = 343308620
        await bot.send_photo(user_star, "https://memepedia.ru/wp-content/uploads/2017/07/1429875891_1642837939.png")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —é–∑–µ—Ä—É {user_star} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ {now.strftime('%H:%M  %d.%m.%Y')}!")


@dp.message_handler()
async def command_not_found(message: types.Message):
    await message.delete()
    await message.answer(f"–ö–æ–º–∞–Ω–¥–∞ {message.message_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
